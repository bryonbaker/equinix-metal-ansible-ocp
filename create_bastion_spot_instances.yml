---
- name: Manage Equinix Metal Spot Instances
  hosts: localhost
  vars_files:
    - vars/equinix_metal_vars.yml
  tasks:
    - name: Check if VLAN 505 exists
      uri:
        url: https://api.equinix.com/metal/v1/projects/{{ equinix_metal_project_id }}/virtual-networks
        method: GET
        headers:
          X-Auth-Token: "{{ equinix_metal_api_token }}"
        return_content: yes
      register: vlan_505_check

    - name: Create VLAN 505
      uri:
        url: https://api.equinix.com/metal/v1/projects/{{ equinix_metal_project_id }}/virtual-networks
        method: POST
        headers:
          X-Auth-Token: "{{ equinix_metal_api_token }}"
          Content-Type: application/json
        body_format: json
        body:
          description: "VLAN 505"
          metro: "sy"
          vxlan: 505
      register: vlan_505
      when: vlan_505_check.json.virtual_networks | selectattr('vxlan', 'equalto', 505) | list | length == 0

    - name: Check if VLAN 10 exists
      uri:
        url: https://api.equinix.com/metal/v1/projects/{{ equinix_metal_project_id }}/virtual-networks
        method: GET
        headers:
          X-Auth-Token: "{{ equinix_metal_api_token }}"
        return_content: yes
      register: vlan_10_check

    - name: Create VLAN 10
      uri:
        url: https://api.equinix.com/metal/v1/projects/{{ equinix_metal_project_id }}/virtual-networks
        method: POST
        headers:
          X-Auth-Token: "{{ equinix_metal_api_token }}"
          Content-Type: application/json
        body_format: json
        body:
          description: "VLAN 10"
          metro: "sy"
          vxlan: 10
      register: vlan_10
      when: vlan_10_check.json.virtual_networks | selectattr('vxlan', 'equalto', 10) | list | length == 0

    - name: Check if VLAN 506 exists
      uri:
        url: https://api.equinix.com/metal/v1/projects/{{ equinix_metal_project_id }}/virtual-networks
        method: GET
        headers:
          X-Auth-Token: "{{ equinix_metal_api_token }}"
        return_content: yes
      register: vlan_506_check

    - name: Create VLAN 506
      uri:
        url: https://api.equinix.com/metal/v1/projects/{{ equinix_metal_project_id }}/virtual-networks
        method: POST
        headers:
          X-Auth-Token: "{{ equinix_metal_api_token }}"
          Content-Type: application/json
        body_format: json
        body:
          description: "VLAN 506"
          metro: "sy"
          vxlan: 506
      register: vlan_506
      when: vlan_506_check.json.virtual_networks | selectattr('vxlan', 'equalto', 506) | list | length == 0

    - name: Check if spot instance exists
      uri:
        url: https://api.equinix.com/metal/v1/projects/{{ equinix_metal_project_id }}/devices
        method: GET
        headers:
          X-Auth-Token: "{{ equinix_metal_api_token }}"
        return_content: yes
      register: instance_check

    - name: Set fact for existing instance
      set_fact:
        instance_info: "{{ (instance_check.json.devices | selectattr('hostname', 'equalto', 'bastion') | list)[0] }}"
      when: instance_check.json.devices | selectattr('hostname', 'equalto', 'bastion') | list | length > 0

    - name: Create a spot instance on Equinix Metal
      uri:
        url: https://api.equinix.com/metal/v1/projects/{{ equinix_metal_project_id }}/devices
        method: POST
        headers:
          X-Auth-Token: "{{ equinix_metal_api_token }}"
          Content-Type: application/json
        body_format: json
        body:
          hostname: "bastion"
          plan: "m3.small.x86"
          metro: "sy"
          operating_system: "rhel_9"
          billing_cycle: "hourly"
          spot_instance: true
          spot_price_max: 0.11
      register: result
      when: instance_check.json.devices | selectattr('hostname', 'equalto', 'bastion') | list | length == 0
      failed_when: result.status != 201

    - name: Set instance information from creation result
      set_fact:
        instance_info: "{{ result.json }}"
      when: result.json is defined

    - name: Wait for instance to be active
      until: instance_status.json.state == "active"
      retries: 30
      delay: 10
      local_action:
        module: uri
        url: "https://api.equinix.com/metal/v1/devices/{{ instance_info.id }}"
        method: GET
        headers:
          X-Auth-Token: "{{ equinix_metal_api_token }}"
        return_content: yes
      register: instance_status
      when: instance_info is defined

#    - name: Convert to hybrid unbonded mode
#      uri:
#        url: "https://api.equinix.com/metal/v1/ports/{{ instance_info.network_ports[0].id }}/disbond"
#        method: POST
#        headers:
#          X-Auth-Token: "{{ equinix_metal_api_token }}"
#          Content-Type: application/json
#        body_format: json
#        body:
#          bulk_disable: false
#        return_content: yes
#      register: disbond_result
#      failed_when: disbond_result.status not in [200, 202]

#    - name: Attach VLANs to the instance in bulk
#      uri:
#        url: "https://api.equinix.com/metal/v1/ports/{{ instance_info.network_ports[0].id }}/vlan-assignments/batches"
#        method: POST
#        headers:
#          X-Auth-Token: "{{ equinix_metal_api_token }}"
#          Content-Type: application/json
#        body_format: json
#        body:
#          vlan_assignments:
#            - vlan: "{{ (vlan_505_check.json.virtual_networks | selectattr('vxlan', 'equalto', 505) | list)[0].id if vlan_505_check.json.virtual_networks | selectattr('vxlan', 'equalto', 505) | list else vlan_505.json.id }}"
#              state: "assigned"
#            - vlan: "{{ (vlan_10_check.json.virtual_networks | selectattr('vxlan', 'equalto', 10) | list)[0].id if vlan_10_check.json.virtual_networks | selectattr('vxlan', 'equalto', 10) | list else vlan_10.json.id }}"
#              state: "assigned"
#            - vlan: "{{ (vlan_506_check.json.virtual_networks | selectattr('vxlan', 'equalto', 506) | list)[0].id if vlan_506_check.json.virtual_networks | selectattr('vxlan', 'equalto', 506) | list else vlan_506.json.id }}"
#              state: "assigned"
#        return_content: yes
#      register: vlan_assignments_result
#      failed_when: vlan_assignments_result.status not in [200, 201, 202]

    - name: Disable SSH host key checking
      set_fact:
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

    - name: Check if the secondary IP address is already assigned
      command: ip addr show dev enp1s0f1np1
      register: enp1s0f1np1_ip_check
      delegate_to: "{{ instance_info.ip_addresses[0].address }}"
      become: yes

    - name: Add secondary IP address to enp1s0f1np1 if not already assigned
      command: ip addr add 192.168.100.10/24 dev enp1s0f1np1
      delegate_to: "{{ instance_info.ip_addresses[0].address }}"
      become: yes
      when: "'192.168.100.10/24' not in enp1s0f1np1_ip_check.stdout"

    - name: Install DHCP server
      ansible.builtin.shell: |
        dnf install -y dhcp-server
        systemctl enable dhcpd
      delegate_to: "{{ instance_info.ip_addresses[0].address }}"
      become: yes
      vars:
        ansible_user: root

    - name: Configure DHCP for 192.168.100.0/24 range
      ansible.builtin.blockinfile:
        path: /etc/dhcp/dhcpd.conf
        block: |
          subnet 192.168.100.0 netmask 255.255.255.0 {
              range 192.168.100.100 192.168.100.200;
              option routers 192.168.100.1;
              option broadcast-address 192.168.100.255;
              option domain-name-servers 8.8.8.8, 8.8.4.4;
              filename "undionly.kpxe";
              next-server 192.168.100.10;
          }
      delegate_to: "{{ instance_info.ip_addresses[0].address }}"
      become: yes

    - name: Restart DHCP service
      ansible.builtin.systemd:
        name: dhcpd
        state: restarted
      delegate_to: "{{ instance_info.ip_addresses[0].address }}"
      become: yes

    - name: Install TFTP server
      ansible.builtin.shell: |
        dnf install -y tftp-server
        systemctl enable --now tftp
      delegate_to: "{{ instance_info.ip_addresses[0].address }}"
      become: yes

    - name: Download undionly.kpxe from Equinix Metal
      ansible.builtin.get_url:
        url: http://tinkerbell.sy4.packet.net/ipxe/undionly.kpxe
        dest: /var/lib/tftpboot/undionly.kpxe
      delegate_to: "{{ instance_info.ip_addresses[0].address }}"
      become: yes

    - name: Restart TFTP service
      ansible.builtin.systemd:
        name: tftp
        state: restarted
      delegate_to: "{{ instance_info.ip_addresses[0].address }}"
      become: yes

